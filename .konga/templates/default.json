{"tmp":{".gitignore":"# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n"},"server":{"index.js":"var koa = require('koa')\n  , app = koa();\n\n// use environment-specific configuration; default to 'development' if unspecified\nvar env = process.env.NODE_ENV || 'development'\n  , config = require('./config/config')[env];\n\nrequire('./config/mongoose')(config);\nrequire('./config/models')(config);\nrequire('./config/koa')(app, config);\nrequire('./config/routes')(app, config);\n\napp.listen(config.port, function () {\n  console.log('Listening for Connections', { port: config.port });\n});\n","config":{"routes.js":"module.exports = function (app, config) {};\n","mongoose.js":"var mongoose = require('mongoose');\n\nmodule.exports = function (config) {\n  if (config.env === 'development') mongoose.set('debug', true);\n\n  var connect = function () {\n    var opts = { server: { socketOptions: { keepAlive: 1 }}};\n    mongoose.connect('mongodb://' + config.mongo.host + '/' + config.mongo.db, opts);\n  };\n  connect();\n\n  mongoose.connection.on('disconnected', function () {\n    connect();\n  });\n  mongoose.connection.on('error', function (err) {\n    console.error(err);\n  });\n  mongoose.connection.once('open', function callback () {\n    console.log('Connected to MongoDB', config.mongo);\n  });\n};\n","models.js":"var fs = require('fs');\n\n/**\n * bootstrap component models in one of two ways:\n * - 1. Automatically (default)\n * - 2. Specify EACH component by name in preferred load order\n */\n\nvar components;\n// var components = [\n//   'comments'\n// ];\n\nmodule.exports = function (config) {\n  var componentsPath = config.path.root + '/server/components/';\n\n  if ((components || []).length > 0) components.forEach(function (component) {\n    require(componentsPath + component + '/model');\n  });\n  else fs.readdirSync(componentsPath).forEach(function (component) {\n    var modelPath = componentsPath + component + '/model.js';\n    if (fs.existsSync(modelPath)) require(modelPath);\n  });\n};\n","koa.js":"var compress = require('koa-compress')\n  , logger = require('koa-logger')\n  , router = require('koa-router')\n  , static = require('koa-static');\n\nvar errors = require('../components/errors/middleware');\n\nmodule.exports = function (app, config) {\n  if (config.env !== 'test') app.use(logger());\n  app.use(errors.error());\n  app.use(compress());\n  app.use(static(config.path.static, { maxage: 1000 * 60 * 60 * 24 * 7 }));\n  app.use(router(app));\n  app.use(errors.notFound());\n};\n","config.js":"var path = require('path')\n  , port = process.env.PORT || 3000\n  , root = path.normalize(__dirname + '/../..');\n\nmodule.exports = {\n  development: {\n    env: 'development',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_dev'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n  test: {\n    env: 'test',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_test'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n  production: {\n    env: 'production',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_prod'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n};\n","config.default.js":"/**\n * Create a copy of this file and name it 'config.js'\n * - change values based on your local environment(s) \n */\n\nvar path = require('path')\n  , port = process.env.PORT || 3000\n  , root = path.normalize(__dirname + '/../..');\n\nmodule.exports = {\n  development: {\n    env: 'development',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_dev'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n  test: {\n    env: 'test',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_test'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n  production: {\n    env: 'production',\n    mongo: {\n      host: 'localhost',\n      db: 'konga_prod'\n    },\n    path: {\n      root: root,\n      static: root + '/client',\n      tmp: root + '/tmp'\n    },\n    port: port,\n    secrets: ['secretString']\n  },\n};\n"},"components":{"errors":{"model.js":"var mongoose = require('mongoose')\n  , Schema = mongoose.Schema;\n\nvar ErrorSchema = new Schema({\n  ip: String,\n  method: String,\n  referer: String,\n  stack: String,\n  status: Number,\n  url: String\n});\n\nmongoose.model('Error', ErrorSchema);\n","middleware.js":"var mongoose = require('mongoose')\n  , Bluebird = require('bluebird');\n\nvar _Error = mongoose.model('Error');\n\nexports.error = function () {\n  return function *(next) {\n    try {\n      yield next;\n    } catch (err) {\n      try {\n        var _error = new _Error({ // record errors as Mongoose-modeled documents\n          ip: this.ip,\n          method: this.method,\n          referer: this.header.referer,\n          stack: err.stack,\n          status: err.status || 500,\n          url: this.url\n        });\n        yield Bluebird.promisify(_error.save, _error)();\n      } catch (_err) {\n        console.error(_err.stack || _err); // print error logging error to console, but do not overwrite original error\n      }\n      this.status = err.status || 500;\n      this.body = {\n        msg: 'Internal server error',\n        status: this.status\n      };\n    }\n  };\n};\n\nexports.notFound = function () {\n  return function *() {\n    this.status = 404;\n    this.body = {\n      msg: 'Not found',\n      status: this.status\n    };\n  };\n};\n"}}},"package.json":"{\n  \"name\": \"konga-boilerplate\",\n  \"private\": true,\n  \"version\": \"0.1.0\",\n  \"description\": \"An opinionated Koa/AngularJS boilerplate.\",\n  \"author\": {\n    \"name\": \"Michael J. Bondra\",\n    \"email\": \"mjbondra@gmail.com\",\n    \"url\": \"https://mjbondra.com\"\n  },\n  \"scripts\": {\n    \"start\": \"NODE_ENV=development ./node_modules/.bin/nodemon server/index.js\",\n    \"install\": \"bundle install && gulp install\"\n  },\n  \"browser\": {\n    \"angular\": \"./client/ng/libraries/angular.js\"\n  },\n  \"devDependencies\": {\n    \"angular\": \"^1.3.1\",\n    \"bower\": \"^1.3.12\",\n    \"browserify\": \"^6.2.0\",\n    \"gulp\": \"^3.8.9\",\n    \"gulp-csso\": \"^0.2.9\",\n    \"gulp-filter\": \"^1.0.2\",\n    \"gulp-notify\": \"^2.0.0\",\n    \"gulp-plumber\": \"^0.6.6\",\n    \"gulp-rename\": \"^1.2.0\",\n    \"gulp-ruby-sass\": \"^0.7.1\",\n    \"gulp-sourcemaps\": \"^1.2.7\",\n    \"gulp-uglify\": \"^1.0.1\",\n    \"nodemon\": \"^1.2.1\",\n    \"vinyl-buffer\": \"^1.0.0\",\n    \"vinyl-source-stream\": \"^1.0.0\"\n  },\n  \"dependencies\": {\n    \"bluebird\": \"^2.3.10\",\n    \"co-body\": \"^1.0.0\",\n    \"koa\": \"^0.13.0\",\n    \"koa-compress\": \"^1.0.8\",\n    \"koa-logger\": \"^1.2.2\",\n    \"koa-router\": \"^3.5.0\",\n    \"koa-static\": \"^1.4.7\",\n    \"mongoose\": \"^3.8.18\"\n  },\n  \"engines\": {\n    \"node\": \">=0.11.9\"\n  }\n}\n","nodemon.json":"{\n  \"execMap\": {\n    \"js\": \"node --harmony\"\n  }\n}\n","gulpfile.js":"var gulp = require('gulp');\n\nrequire('./.gulp/bower'); //  task(s):  bower\nrequire('./.gulp/css');   //  task(s):  css, css-install\nrequire('./.gulp/js');    //  task(s):  js, js-install\n\ngulp.task('watch', function () {\n  gulp.watch(['./bower.json'], ['bower']);\n  gulp.watch(['./client/ng/*.js', './client/ng/**/*.js'], ['js']);\n  gulp.watch(['./client/scss/*.scss', './client/scss/**/*.scss'], ['css']);\n});\n\ngulp.task('default', ['css', 'js']);\ngulp.task('install', ['bower', 'css-install', 'js-install']);\n","client":{"scss":{"styles.scss":"/*------------------------------------*\\\n    TABLE OF CONTENTS\n\\*------------------------------------*/\n\n/*---------------------------------------------------------------------*\\\n  1. DEPENDENCIES...............Stylesheet Dependencies\n  2. UNIVERSAL STYLES...........Styles Applied to All Elements\n  3. BASE STYLES................Basic and Elemental Styles\n  4. LAYOUTS....................Layouts and Positioning\n  5. COMPONENTS.................Reusable Utilities and Content\n\\*---------------------------------------------------------------------*/\n\n/*------------------------------------*\\\n    DEPENDENCIES\n\\*------------------------------------*/\n\n//--Third Party Variables--//\n\n//--Third Party Dependencies--//\n\n//--App Variables--//\n@import \"variables/**/*\";\n\n//--App Dependencies--//\n@import \"abstractions/**/*\";\n\n/*------------------------------------*\\\n    UNIVERSAL STYLES\n\\*------------------------------------*/\n\n*, *:before, *:after {\n  -webkit-box-sizing: border-box;\n     -moz-box-sizing: border-box;\n          box-sizing: border-box;\n}\n\n/*------------------------------------*\\\n    BASE STYLES\n\\*------------------------------------*/\n\nhtml {\n  font-size: 62.5%;\n}\n\n@import \"base/**/*\";\n\n/*------------------------------------*\\\n    LAYOUTS\n\\*------------------------------------*/\n\n@import \"layouts/**/*\";\n\n/*------------------------------------*\\\n    COMPONENTS\n\\*------------------------------------*/\n\n@import \"components/**/*\";\n"},"ng":{"libraries":{"angular.js":"'use strict';\n\n// make Angular compatible with CommonJS for browserify\nrequire('../../../node_modules/angular/angular');\nmodule.exports = window.angular;\n"},"config":{"index.js":"'use strict';\n\nvar angular = require('angular');\n\nangular.module('app.config', []);\n"},"components":{"index.js":"'use strict';\n\nvar angular = require('angular');\n\nangular.module('app.components', []);\n"},"app.js":"'use strict';\n\nvar angular = require('angular');\n\n// App Dependencies\nrequire('./components');\nrequire('./config');\n\n// AngularJS/App modules\nangular.module('app', [\n  'app.components',\n  'app.config'\n]);\n"},"js":{".gitignore":"# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n"},"index.html":"<!doctype html>\n<html lang=\"en\" data-ng-app=\"app\">\n  <head>\n    <meta charset=\"utf-8\">\n    <link href=\"/css/styles.min.css\" rel=\"stylesheet\">\n    <script src=\"/js/app.min.js\" type=\"text/javascript\"></script>\n    <title></title>\n  </head>\n  <body>\n    <header></header>\n    <main></main>\n    <footer></footer>\n  </body>\n</html>\n","css":{".gitignore":"# Ignore everything in this directory\n*\n# Except this file\n!.gitignore\n"}},"bower.json":"{\n  \"name\": \"konga-boilerplate\",\n  \"version\": \"0.1.0\",\n  \"dependencies\": {}\n}\n","LICENSE":"The MIT License (MIT)\n\nCopyright (c) 2014 Michael J. Bondra < mjbondra@gmail.com >\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \"Software\"), to deal in the Software without restriction, including without limitation\nthe rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,\nand to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions\nof the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED\nTO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF\nCONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER\nDEALINGS IN THE SOFTWARE.\n","Gemfile":"source 'https://rubygems.org'\n\ngroup :development do\n  gem 'sass'\n  gem 'sass-globbing'\nend\n",".ruby-version":"2.1.3\n",".ruby-gemset":"konga-boilerplate\n",".jshintrc":"{\n  \"browser\": true,\n  \"bitwise\": true,\n  \"devel\": true,\n  \"eqeqeq\": true,\n  \"esnext\": true,\n  \"forin\": true,\n  \"immed\": true,\n  \"indent\": 2,\n  \"jquery\": true,\n  \"latedef\": true,\n  \"laxcomma\": true,\n  \"multistr\": true,\n  \"newcap\": true,\n  \"noarg\": true,\n  \"node\": true,\n  \"quotmark\": true,\n  \"regexp\": true,\n  \"undef\": true,\n  \"unused\": true,\n  \"trailing\": true,\n  \"smarttabs\": true,\n  \"globals\": {\n    \"document\": false,\n    \"require\": false,\n    \"window\": false\n  }\n}\n",".gulp":{"js.js":"var gulp = require('gulp')\n  , browserify = require('browserify')\n  , buffer = require('vinyl-buffer')\n  , notify = require('gulp-notify')\n  , plumber = require('gulp-plumber')\n  , rename = require('gulp-rename')\n  , source = require('vinyl-source-stream')\n  , sourcemaps = require('gulp-sourcemaps')\n  , uglify = require('gulp-uglify');\n\nfunction bundle (bundler, name) {\n  return bundler\n    .bundle()\n    .pipe(plumber())\n    .pipe(source(name))\n    .pipe(buffer())\n    .pipe(gulp.dest('./client/js/'))\n    .pipe(rename(function (path) { path.basename += '.min'; }))\n    .pipe(sourcemaps.init({ loadMaps: true }))\n      .pipe(uglify())\n    .pipe(sourcemaps.write('./'))\n    .pipe(gulp.dest('./client/js/'))\n    .pipe(notify('JS was successfully compiled.'));\n}\n\nfunction js (name) {\n  var bundler = browserify({\n    entries: ['./client/ng/' + name],\n    debug: true\n  });\n  return bundle(bundler, name);\n}\n\nfunction jsApp () {\n  return js('app.js');\n}\n\ngulp.task('js', jsApp);\ngulp.task('js-install', ['bower'], jsApp);\n","css.js":"var gulp = require('gulp')\n  , csso = require('gulp-csso')\n  , filter = require('gulp-filter')\n  , notify = require('gulp-notify')\n  , plumber = require('gulp-plumber')\n  , rename = require('gulp-rename')\n  , sass = require('gulp-ruby-sass');\n\nfunction css () {\n  return gulp.src('./client/scss/**/*.scss')\n    .pipe(plumber())\n    .pipe(sass({\n      require: 'sass-globbing'\n    }))\n    .pipe(gulp.dest('./client/css/'))\n    .pipe(filter(['*', '!*.map']))\n    .pipe(rename(function (path) { path.basename += '.min'; }))\n    .pipe(csso())\n    .pipe(gulp.dest('./client/css/'))\n    .pipe(notify('CSS was successfully compiled.'));\n}\n\ngulp.task('css', css);\ngulp.task('css-install', ['bower'], css);\n","bower.js":"var gulp = require('gulp')\n  , bower = require('bower');\n\ngulp.task('bower', function (cb) {\n  bower.commands.install([], { save: true }, {})\n    .on('end', function (installed) {\n      cb(); // notify gulp that this task is finished\n    });\n});\n"},".gitignore":"# Configuration #\n#################\nconfig.js\nsftp-config.json\n\n# NPM Packages #\n################\nnode_modules\n\n# Bower Packages #\n##################\nclient/lib\n\n# Compiled Source, Logs and Non-Essential Data #\n################################################\n*.seed\n*.log\n*.csv\n*.dat\n*.out\n*.pid\n*.gz\n.DS_Store\n.sass-cache\nGemfile.lock\nlib-cov\nlogs\npids\nresults\n",".bowerrc":"{\n  \"directory\": \"client/lib\"\n}\n"}